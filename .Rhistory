# Attention: This line should be replaced with the appropiate path where the R libraries are installed
#library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("adabag");
library("caret");
library("kernlab");
library("klaR");
library("randomForest");
# Function Trainer
# Input:
#   d - dataset (sonar, hepatitis, pima, spect)
#   alg - classifier algorithm (J48,svmLinear,nb,RandomForest,nnet,Boosting,Bagging)
#   wd - working directory
# Output:
#   Confusion matrix for the given dataset and algorithm
Trainer = function(d,alg,wd,iter){
df <- read.csv(paste(wd,"/",d,".txt",sep=""))
if(d=="hepatitis"){
df[df =="?"] <- NA
df <- na.omit(df,col.names=FALSE)
rownames(df) = NULL
}
# WE CHANGE THE CLASS COLUMN TYPE TO BE A FACTOR
# ASSUMING THAT THE CLASS IS IN THE LAST COLUMN, OTHERWISE IT WON'T WORK
#pima[,length(pima)] = factor(pima[,length(pima)])
df[,length(df)] = factor(df[,length(df)])
df = df[sample(nrow(df), nrow(df)), ]
# SPECIFIC INSTRUCTIONS FOR EACH ALGORITHM
if(alg == "J48_no_cv"){
#print("nocv")
x = df[,c(1:(length(df)-1))]
if(d == "hepatitis" ){
x <- model.matrix(~ ., data = x)
}
y = df[,length(df)]
model = train(x,y,"J48")
p = predict(model, x)
xtab = table(p,y)
return(confusionMatrix(xtab))
}
if(alg=="svmLinear" ||  alg == "nb" ||  alg == "J48" || alg == "nnet"){
x = df[,c(1:(length(df)-1))]
if(d == "hepatitis" ){
x <- model.matrix(~ ., data = x)
}
y = df[,length(df)]
model = train(x,y,alg,trControl=trainControl(method='cv',number=10))
p = predict(model, x)
xtab = table(p,y)
return(confusionMatrix(xtab))
}
if(alg=="RandomForest"){
temp_rf=df
x = temp_rf[,c(1:(length(temp_rf)-1))]
if(d == "hepatitis" ){
x <- model.matrix(~ ., data = x)
}
#x = df[,c(1:(length(df)-1))]
y = temp_rf[,length(temp_rf)]
model <- rfcv(x, y,cv.fold=10)
p = model$predicted[[1]]
xtab = table(p,y)
return(confusionMatrix(xtab))
}
if(alg=="Boosting"){
temp_boo=df
y = temp_boo[,length(temp_boo)]
model =  boosting.cv(as.formula(paste(tail(names(temp_boo), 1), "~ .")), v=10, data=temp_boo, mfinal=5,
control=rpart.control(cp=0.01))
xtab = table(model$class,y)
return(confusionMatrix(xtab))
}
if(alg=="Bagging"){
temp_bag=df
y = temp_bag[,length(temp_bag)]
model =  bagging.cv(as.formula(paste(tail(names(temp_bag), 1), "~ .")), v=10, data=temp_bag, mfinal=5,
control=rpart.control(cp=0.01))
xtab = table(model$class,y)
return(confusionMatrix(xtab))
}
#if(alg=="nb"){
#  x = df[,c(1:(length(df)-1))]
#  y = df[,length(df)]
#  model = train(x,y,alg,trControl=trainControl(method='cv',number=10))
#  p = predict(model, x)
#  xtab = table(p,y)
#  return(confusionMatrix(xtab))
#}
}
# We first calculate the metrics for the specified datasets and methods
# mentioned below
datasets = c("sonar","pima","spect","hepatitis")
methods = c("J48_no_cv","J48","svmLinear","nb","nnet","RandomForest")
accuracyMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
recallMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
specificityMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
precisionMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
f1Matrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
errorMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
rownames(accuracyMatrix) = datasets
colnames(accuracyMatrix) = methods
rownames(recallMatrix) = datasets
colnames(recallMatrix) = methods
rownames(specificityMatrix) = datasets
colnames(specificityMatrix) = methods
rownames(precisionMatrix) = datasets
colnames(precisionMatrix) = methods
rownames(f1Matrix) = datasets
colnames(f1Matrix) = methods
rownames(errorMatrix) = datasets
colnames(errorMatrix) = methods
# We should average the result for 10 iteration
# Attention: This can take a while
iter = 1;
for(k in c(1:iter)){
for(i in c(1:length(datasets))){
#print(d)
#currentDataset = read.csv(paste(workingDirectory,d,".txt",sep=""))
for(j in c(1:length(methods))){
#print(m)
confMatrix = Trainer(datasets[i],methods[j],workingDirectory,iter);
accuracyMatrix[i,j] = accuracyMatrix[i,j] + confMatrix$overall[1];
recallMatrix[i,j] = recallMatrix[i,j] + confMatrix$byClass[1];
specificityMatrix[i,j] = specificityMatrix[i,j] + confMatrix$byClass[2];
precisionMatrix[i,j] = precisionMatrix[i,j] + (confMatrix$table[1,1] / (confMatrix$table[1,1] + confMatrix$table[1,2]));
f1Matrix[i,j] = f1Matrix[i,j] + ((2*confMatrix$table[1,1]) /
(2*confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1]));
errorMatrix[i,j] = errorMatrix[i,j] + ((confMatrix$table[1,2] + confMatrix$table[2,1]) /
(confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1] + confMatrix$table[2,2]));
}
}
}
accuracyMatrix = accuracyMatrix / iter;
recallMatrix = recallMatrix / iter;
specificityMatrix = specificityMatrix / iter;
precisionMatrix = precisionMatrix / iter;
f1Matrix = f1Matrix / iter;
errorMatrix = errorMatrix / iter;
# Now we do the same but for Boosting and Bagging
# Just one iteration, it crashes if there are more
datasets = c("sonar","pima","spect","hepatitis")
methods = c("Boosting","Bagging")
accuracyMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
recallMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
specificityMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
precisionMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
f1Matrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
errorMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
rownames(accuracyMatrix_2) = datasets
colnames(accuracyMatrix_2) = methods
rownames(recallMatrix_2) = datasets
colnames(recallMatrix_2) = methods
rownames(specificityMatrix_2) = datasets
colnames(specificityMatrix_2) = methods
rownames(precisionMatrix_2) = datasets
colnames(precisionMatrix_2) = methods
rownames(f1Matrix_2) = datasets
colnames(f1Matrix_2) = methods
rownames(errorMatrix_2) = datasets
colnames(errorMatrix_2) = methods
for(i in c(1:length(datasets))){
#print(d)
#currentDataset = read.csv(paste(workingDirectory,d,".txt",sep=""))
for(j in c(1:length(methods))){
#print(m)
confMatrix = Trainer(datasets[i],methods[j],workingDirectory,iter);
accuracyMatrix_2[i,j] = accuracyMatrix_2[i,j] + confMatrix$overall[1];
recallMatrix_2[i,j] = recallMatrix_2[i,j] + confMatrix$byClass[1];
specificityMatrix_2[i,j] = specificityMatrix_2[i,j] + confMatrix$byClass[2];
precisionMatrix_2[i,j] = precisionMatrix_2[i,j] + (confMatrix$table[1,1] / (confMatrix$table[1,1] + confMatrix$table[1,2]));
f1Matrix_2[i,j] = f1Matrix_2[i,j] + ((2*confMatrix$table[1,1]) /
(2*confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1]));
errorMatrix_2[i,j] = errorMatrix_2[i,j] + ((confMatrix$table[1,2] + confMatrix$table[2,1]) /
(confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1] + confMatrix$table[2,2]));
}
}
# We combine the resuls in a big matrix
accuracyMatrix = cbind(accuracyMatrix,accuracyMatrix_2)
recallMatrix = cbind(recallMatrix, recallMatrix_2)
specificityMatrix = cbind(specificityMatrix, specificityMatrix_2)
precisionMatrix = cbind(precisionMatrix, precisionMatrix_2)
f1Matrix = cbind(f1Matrix, f1Matrix_2)
errorMatrix = cbind(errorMatrix, errorMatrix_2)
# We remove the temporal matrixes
remove(accuracyMatrix_2)
remove(recallMatrix_2)
remove(specificityMatrix_2)
remove(precisionMatrix_2)
remove(f1Matrix_2)
remove(errorMatrix_2)
View(accuracyMatrix)
View(errorMatrix)
datasets = c("sonar","pima","spect","hepatitis")
methods = c("Boosting","Bagging")
accuracyMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
recallMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
specificityMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
precisionMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
f1Matrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
errorMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
rownames(accuracyMatrix_2) = datasets
colnames(accuracyMatrix_2) = methods
rownames(recallMatrix_2) = datasets
colnames(recallMatrix_2) = methods
rownames(specificityMatrix_2) = datasets
colnames(specificityMatrix_2) = methods
rownames(precisionMatrix_2) = datasets
colnames(precisionMatrix_2) = methods
rownames(f1Matrix_2) = datasets
colnames(f1Matrix_2) = methods
rownames(errorMatrix_2) = datasets
colnames(errorMatrix_2) = methods
for(i in c(1:length(datasets))){
#print(d)
#currentDataset = read.csv(paste(workingDirectory,d,".txt",sep=""))
for(j in c(1:length(methods))){
#print(m)
confMatrix = Trainer(datasets[i],methods[j],workingDirectory,iter);
accuracyMatrix_2[i,j] = accuracyMatrix_2[i,j] + confMatrix$overall[1];
recallMatrix_2[i,j] = recallMatrix_2[i,j] + confMatrix$byClass[1];
specificityMatrix_2[i,j] = specificityMatrix_2[i,j] + confMatrix$byClass[2];
precisionMatrix_2[i,j] = precisionMatrix_2[i,j] + (confMatrix$table[1,1] / (confMatrix$table[1,1] + confMatrix$table[1,2]));
f1Matrix_2[i,j] = f1Matrix_2[i,j] + ((2*confMatrix$table[1,1]) /
(2*confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1]));
errorMatrix_2[i,j] = errorMatrix_2[i,j] + ((confMatrix$table[1,2] + confMatrix$table[2,1]) /
(confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1] + confMatrix$table[2,2]));
}
}
View(precisionMatrix_2)
View(accuracyMatrix_2)
accuracyMatrix[,(1:6)]
View(accuracyMatrix)
accuracyMatrix = accuracyMatrix[,(1:6)]
View(accuracyMatrix)
recallMatrix = recallMatrix[,(1:6)]
specificityMatrix = specificityMatrix[,(1:6)]
precisionMatrix = precisionMatrix[,(1:6)]
f1Matrix = f1Matrix[,(1:6)]
errorMatrix = errorMatrix[,(1:6)]
accuracyMatrix = cbind(accuracyMatrix,accuracyMatrix_2)
recallMatrix = cbind(recallMatrix, recallMatrix_2)
specificityMatrix = cbind(specificityMatrix, specificityMatrix_2)
precisionMatrix = cbind(precisionMatrix, precisionMatrix_2)
f1Matrix = cbind(f1Matrix, f1Matrix_2)
errorMatrix = cbind(errorMatrix, errorMatrix_2)
remove(accuracyMatrix_2)
remove(recallMatrix_2)
remove(specificityMatrix_2)
remove(precisionMatrix_2)
remove(f1Matrix_2)
remove(errorMatrix_2)
View(accuracyMatrix)
save.image("~/Desktop/InBucharest/NML/13-14 Lallich Rizoiu/Ensemble Methods/Exercises/miParte/EM_matrixes.RData")
# Numerical Machine Learning - Ensemble Methods
# DMKM - Bucharest 2014
# By: Yusra IBRAHIM, Jose ROBLES
# Attention: Dont forget to set up your working directory!
workingDirectory = "~/Desktop/InBucharest/NML/13-14 Lallich Rizoiu/Ensemble Methods/Exercises/miParte"
# To check if the required packages are installed
if("adabag" %in% rownames(installed.packages()) == FALSE) {install.packages("adabag")};
if("caret" %in% rownames(installed.packages()) == FALSE) {install.packages("caret")};
if("kernlab" %in% rownames(installed.packages()) == FALSE) {install.packages("kernlab")};
if("klaR" %in% rownames(installed.packages()) == FALSE) {install.packages("klaR")};
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")};
# To open the libraries
# Attention: This line should be replaced with the appropiate path where the R libraries are installed
#library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("adabag");
library("caret");
library("kernlab");
library("klaR");
library("randomForest");
# Function Trainer
# Input:
#   d - dataset (sonar, hepatitis, pima, spect)
#   alg - classifier algorithm (J48,svmLinear,nb,RandomForest,nnet,Boosting,Bagging)
#   wd - working directory
# Output:
#   Confusion matrix for the given dataset and algorithm
Trainer = function(d,alg,wd,iter){
df <- read.csv(paste(wd,"/",d,".txt",sep=""))
if(d=="hepatitis"){
df[df =="?"] <- NA
df <- na.omit(df,col.names=FALSE)
rownames(df) = NULL
}
# WE CHANGE THE CLASS COLUMN TYPE TO BE A FACTOR
# ASSUMING THAT THE CLASS IS IN THE LAST COLUMN, OTHERWISE IT WON'T WORK
#pima[,length(pima)] = factor(pima[,length(pima)])
df[,length(df)] = factor(df[,length(df)])
df = df[sample(nrow(df), nrow(df)), ]
# SPECIFIC INSTRUCTIONS FOR EACH ALGORITHM
if(alg == "J48_no_cv"){
#print("nocv")
x = df[,c(1:(length(df)-1))]
if(d == "hepatitis" ){
x <- model.matrix(~ ., data = x)
}
y = df[,length(df)]
model = train(x,y,"J48")
p = predict(model, x)
xtab = table(p,y)
return(confusionMatrix(xtab))
}
if(alg=="svmLinear" ||  alg == "nb" ||  alg == "J48" || alg == "nnet"){
x = df[,c(1:(length(df)-1))]
if(d == "hepatitis" ){
x <- model.matrix(~ ., data = x)
}
y = df[,length(df)]
model = train(x,y,alg,trControl=trainControl(method='cv',number=10))
p = predict(model, x)
xtab = table(p,y)
return(confusionMatrix(xtab))
}
if(alg=="RandomForest"){
temp_rf=df
x = temp_rf[,c(1:(length(temp_rf)-1))]
if(d == "hepatitis" ){
x <- model.matrix(~ ., data = x)
}
#x = df[,c(1:(length(df)-1))]
y = temp_rf[,length(temp_rf)]
model <- rfcv(x, y,cv.fold=10)
p = model$predicted[[1]]
xtab = table(p,y)
return(confusionMatrix(xtab))
}
if(alg=="Boosting"){
temp_boo=df
y = temp_boo[,length(temp_boo)]
model =  boosting.cv(as.formula(paste(tail(names(temp_boo), 1), "~ .")), v=10, data=temp_boo, mfinal=5,
control=rpart.control(cp=0.01))
xtab = table(model$class,y)
return(confusionMatrix(xtab))
}
if(alg=="Bagging"){
temp_bag=df
y = temp_bag[,length(temp_bag)]
model =  bagging.cv(as.formula(paste(tail(names(temp_bag), 1), "~ .")), v=10, data=temp_bag, mfinal=5,
control=rpart.control(cp=0.01))
xtab = table(model$class,y)
return(confusionMatrix(xtab))
}
#if(alg=="nb"){
#  x = df[,c(1:(length(df)-1))]
#  y = df[,length(df)]
#  model = train(x,y,alg,trControl=trainControl(method='cv',number=10))
#  p = predict(model, x)
#  xtab = table(p,y)
#  return(confusionMatrix(xtab))
#}
}
# We first calculate the metrics for the specified datasets and methods
# mentioned below
datasets = c("sonar","pima","spect","hepatitis")
methods = c("J48_no_cv","J48","svmLinear","nb","nnet","RandomForest")
accuracyMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
recallMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
specificityMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
precisionMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
f1Matrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
errorMatrix = matrix(0, nrow = length(datasets), ncol = length(methods), )
rownames(accuracyMatrix) = datasets
colnames(accuracyMatrix) = methods
rownames(recallMatrix) = datasets
colnames(recallMatrix) = methods
rownames(specificityMatrix) = datasets
colnames(specificityMatrix) = methods
rownames(precisionMatrix) = datasets
colnames(precisionMatrix) = methods
rownames(f1Matrix) = datasets
colnames(f1Matrix) = methods
rownames(errorMatrix) = datasets
colnames(errorMatrix) = methods
# We should average the result for 10 iteration
# Attention: This can take a while
iter = 10;
for(k in c(1:iter)){
for(i in c(1:length(datasets))){
#print(d)
#currentDataset = read.csv(paste(workingDirectory,d,".txt",sep=""))
for(j in c(1:length(methods))){
#print(m)
confMatrix = Trainer(datasets[i],methods[j],workingDirectory,iter);
accuracyMatrix[i,j] = accuracyMatrix[i,j] + confMatrix$overall[1];
recallMatrix[i,j] = recallMatrix[i,j] + confMatrix$byClass[1];
specificityMatrix[i,j] = specificityMatrix[i,j] + confMatrix$byClass[2];
precisionMatrix[i,j] = precisionMatrix[i,j] + (confMatrix$table[1,1] / (confMatrix$table[1,1] + confMatrix$table[1,2]));
f1Matrix[i,j] = f1Matrix[i,j] + ((2*confMatrix$table[1,1]) /
(2*confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1]));
errorMatrix[i,j] = errorMatrix[i,j] + ((confMatrix$table[1,2] + confMatrix$table[2,1]) /
(confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1] + confMatrix$table[2,2]));
}
}
}
accuracyMatrix = accuracyMatrix / iter;
recallMatrix = recallMatrix / iter;
specificityMatrix = specificityMatrix / iter;
precisionMatrix = precisionMatrix / iter;
f1Matrix = f1Matrix / iter;
errorMatrix = errorMatrix / iter;
View(accuracyMatrix)
datasets = c("sonar","pima","spect","hepatitis")
methods = c("Boosting","Bagging")
accuracyMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
recallMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
specificityMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
precisionMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
f1Matrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
errorMatrix_2 = matrix(0, nrow = length(datasets), ncol = length(methods), )
rownames(accuracyMatrix_2) = datasets
colnames(accuracyMatrix_2) = methods
rownames(recallMatrix_2) = datasets
colnames(recallMatrix_2) = methods
rownames(specificityMatrix_2) = datasets
colnames(specificityMatrix_2) = methods
rownames(precisionMatrix_2) = datasets
colnames(precisionMatrix_2) = methods
rownames(f1Matrix_2) = datasets
colnames(f1Matrix_2) = methods
rownames(errorMatrix_2) = datasets
colnames(errorMatrix_2) = methods
for(i in c(1:length(datasets))){
#print(d)
#currentDataset = read.csv(paste(workingDirectory,d,".txt",sep=""))
for(j in c(1:length(methods))){
#print(m)
confMatrix = Trainer(datasets[i],methods[j],workingDirectory,iter);
accuracyMatrix_2[i,j] = accuracyMatrix_2[i,j] + confMatrix$overall[1];
recallMatrix_2[i,j] = recallMatrix_2[i,j] + confMatrix$byClass[1];
specificityMatrix_2[i,j] = specificityMatrix_2[i,j] + confMatrix$byClass[2];
precisionMatrix_2[i,j] = precisionMatrix_2[i,j] + (confMatrix$table[1,1] / (confMatrix$table[1,1] + confMatrix$table[1,2]));
f1Matrix_2[i,j] = f1Matrix_2[i,j] + ((2*confMatrix$table[1,1]) /
(2*confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1]));
errorMatrix_2[i,j] = errorMatrix_2[i,j] + ((confMatrix$table[1,2] + confMatrix$table[2,1]) /
(confMatrix$table[1,1] + confMatrix$table[1,2] + confMatrix$table[2,1] + confMatrix$table[2,2]));
}
}
View(accuracyMatrix_2)
accuracyMatrix = cbind(accuracyMatrix,accuracyMatrix_2)
recallMatrix = cbind(recallMatrix, recallMatrix_2)
specificityMatrix = cbind(specificityMatrix, specificityMatrix_2)
precisionMatrix = cbind(precisionMatrix, precisionMatrix_2)
f1Matrix = cbind(f1Matrix, f1Matrix_2)
errorMatrix = cbind(errorMatrix, errorMatrix_2)
View(accuracyMatrix)
remove(accuracyMatrix_2)
remove(recallMatrix_2)
remove(specificityMatrix_2)
remove(precisionMatrix_2)
remove(f1Matrix_2)
remove(errorMatrix_2)
View(errorMatrix)
save.image("~/Desktop/InBucharest/NML/13-14 Lallich Rizoiu/Ensemble Methods/Exercises/miParte/EM_matrixes_10iterations.RData")
View(specificityMatrix)
View(recallMatrix)
View(precisionMatrix)
View(`f1Matrix`)
View(errorMatrix)
View(`f1Matrix`)
View(accuracyMatrix)
View(accuracyMatrix)
View(errorMatrix)
View(precisionMatrix)
load("~/Desktop/InBucharest/NML/13-14 Lallich Rizoiu/Ensemble Methods/Exercises/miParte/EM_matrixes.RData")
View(accuracyMatrix)
View(errorMatrix)
View(`f1Matrix`)
View(precisionMatrix)
View(recallMatrix)
View(accuracyMatrix)
View(recallMatrix)
View(specificityMatrix)
View(recallMatrix)
View(precisionMatrix)
View(`f1Matrix`)
View(errorMatrix)
View(accuracyMatrix)
library('apcluster')
apres=vector()
inpath="/Users/jrn/Desktop/InBucharest/NLP/affinity/US_Sim/cluster_US"
outpath="/Users/jrn/Desktop/InBucharest/NLP/affinity/US"
m = read.delim("~/Desktop/InBucharest/NLP/affinity/USfinalrelation.txt",sep=";", header=FALSE)
m = as.matrix(m)
last = length(m[1,])
conDir = list.files(inpath)
if(length(conDir) > 1) {
commonDoc <- vector()
for ( j in 1:length(conDir)){
commonDoc[j]=readChar(paste(inpath,"/",conDir[j],sep=""),140)
names(commonDoc)[j] <- conDir[j]
}
#cluster = apcluster(m[,(1:(length(m)-1))], details=TRUE)
cluster = apcluster(m[,(1:(last-1))], details=TRUE)
for(ind in 1:length(cluster)){
st=''
for(dc in 1:length(cluster[[ind]]))
st=paste(st,commonDoc[as.integer(substr(names(cluster[[ind]])[dc],2,nchar(names(cluster[[ind]])[dc])))],sep=" ")
#st=paste(st,commonDoc[as.integer(names(cluster[[ind]])[dc])],sep=" ")
write(st, file = paste(outpath,'Cluster_final_',ind,'.txt',sep=''))
}
}
load("~/Desktop/InBucharest/NLP/affinity/indonesia_ws.RData")
inpath="/Users/jrn/Desktop/InBucharest/NLP/affinity/tweets/ID"
outpath="/Users/jrn/Desktop/InBucharest/NLP/affinity/ID"
for(ind in 1:length(cluster)){
st=''
for(dc in 1:length(cluster[[ind]]))
st=paste(st,commonDoc[as.integer(substr(names(cluster[[ind]])[dc],2,nchar(names(cluster[[ind]])[dc])))],sep=" ")
#st=paste(st,commonDoc[as.integer(names(cluster[[ind]])[dc])],sep=" ")
write(st, file = paste(outpath,'Cluster',ind,'.txt',sep=''))
}
